class Solution {
public:
            O(n ^ 3)    &&      O(n)
    // bool checkPalindrome(string s) {
    //     int l  = 0, r = s.size() - 1;

    //     while(l <= r) {
    //         if(s[l] != s[r]) {
    //             return false;
    //         }
    //         l++;
    //         r--;
    //     }
    //     return true;
    // }

    // string longestPalindrome(string s) {
    //     int n = s.size();
    //     string res;
    //     for(int i = 0; i < n; i++) {
    //         string str;
    //         for(int j = i; j < n; j++) {
    //             str += s[j];

    //             if(checkPalindrome(str)) {
    //                 if(res.size() < str.size()) {
    //                     res = str;
    //                 }
    //             }
    //         }
    //     }
    //     return res;
    // }/

            // O(n ^ 2)    &&      O(1)
    string longestPalindrome(string s) {
        int n = s.size();
        string res = s.substr(0, 1);
        for(int i = 0; i < n; i++) {
            int l = i, r = i;

            while(l >= 0 && r < n && s[l] == s[r]) {
                if(res.size() < r - l + 1) {
                    res = s.substr(l, r - l + 1);
                }
                l--;
                r++;
            }

            l = i, r = i + 1;

            while(l >= 0 && r < n && s[l] == s[r]) {
                if(res.size() < r - l + 1) {
                    res = s.substr(l, r - l + 1);
                }
                l--;
                r++;
            }
        }
        return res;
    }
};
