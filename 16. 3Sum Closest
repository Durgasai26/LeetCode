class Solution {
public:
    // int threeSumClosest(vector<int>& nums, int target) {
    //     int n = nums.size(), closest = 1e8;
    //                         // O(N^3)   &&     O(1)
    //     for(int i = 0; i < n; i++) {
    //         for(int j = i + 1; j < n; j++) {
    //             for(int k = j + 1; k < n; k++) {
    //                 int sum = nums[i] + nums[j] + nums[k];
    //                 if(abs(sum - target) < abs(closest - target)) {
    //                     closest = sum;
    //                 }
    //             }
    //         }
    //     }
    //     return closest;
    // }
                                        O(N^2)    &&      O(1)
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int closest = 1e8;
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1, r = n - 1;

            while(l < r) {
                int sum = nums[i] + nums[l] + nums[r];

                if(abs(sum - target) < abs(closest - target)) {
                    closest = sum;
                } 
                if(sum < target) {
                    l++;
                }else{
                    r--;
                }
            }
        }
        return closest;
    }
};
