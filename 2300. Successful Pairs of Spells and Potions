class Solution {
public:
    // O(n * m)   &&      O(n)
// vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
//         int n = spells.size(), m = potions.size();
//         vector<int> result;

//         for(int i = 0; i < n; i++) {
//             int cnt = 0;
//             for(int j = 0; j < m; j++) {
//                 if((long long)spells[i] * potions[j] >= success) {
//                     cnt++;
//                 }
//             }
//             result.push_back(cnt);
//         } 
//         return result;
//     }

    // O(mlogm+nlogm)  &&   O(m+n)
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
        int n = spells.size(), m = potions.size();
        vector<int> result;

        sort(potions.begin(), potions.end());

        for(int i = 0; i < n; i++) {
            int low = 0, high = m - 1, idx = m;

            while(low <= high) {
                int mid = low + (high - low) / 2;

                if((long long) spells[i] * potions[mid] >= success) {
                    idx = mid;
                    high = mid - 1;
                }else{
                    low = mid + 1;
                }
            }
            result.push_back(m - idx);
        }
        return result;
    }
};
