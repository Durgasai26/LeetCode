class Solution {
  public:
    O(N)    &&      O(N)
    // void reverseStack(stack<int> &st) {
    //     // code here
    //     vector<int> temp;
        
    //     while(!st.empty()) {
    //         temp.push_back(st.top());
    //         st.pop();
    //     }
        
    //     for(int i = 0; i < temp.size(); i++) {
    //         st.push(temp[i]);
    //     }
    // }
    
    O(N^2)    &&      O(n)
    void insertAtBottom(stack<int>& st, int val) {
        if(st.empty()) {
            st.push(val);
            return;
        }
        
        int top = st.top();
        st.pop();
        insertAtBottom(st, val);
        st.push(top);
    }
    
    void reverseStack(stack<int> &st) {
        // code here
        if(st.empty()) return;
        
        int top = st.top();
        st.pop();
        reverseStack(st);
        insertAtBottom(st, top);
    }
};
