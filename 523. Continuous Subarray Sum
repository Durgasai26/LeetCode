class Solution {
public:
    // bool check(int sum, int k) {
    //     if(k == 0) return sum == 0; 
    //     return ((sum % k) == 0);
    // }
                      // O(N^2) && O(1)
    // bool checkSubarraySum(vector<int>& nums, int k) {
    //     int n = nums.size();

    //     for(int i = 0; i < n; i++) {
    //         int sum = 0;
    //         for(int j = i; j < n; j++) {
    //             sum += nums[j];
    //             bool res = false;
    //             if(j - i >= 1) {
    //                 res = check(sum, k);
    //             }
    //             if(res == true) return true;
    //         }
    //     }
    //     return false;
    // }


    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size(), sum = 0;
        unordered_map<int, int> mp;
        mp[0] = -1;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
                                              // O(N * log N) 77  O(N)    ||    O(N) && O(N)  

            int rem = sum % k;

            if(mp.find(rem) != mp.end()) {
                if(i - mp[rem] >= 2) {
                    return true;
                }
            }else{
                mp[rem] = i;
            }
        }
        return false;
    }


};
