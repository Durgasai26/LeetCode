class Solution {
public:
    // int findMaxLength(vector<int>& nums) {
    //     int n = nums.size(), len = 0;
    // O(N^2)   && O(1)
    //     for(int i = 0; i < n; i++) {
    //         int sum = 0;
    //         for(int j = i; j < n; j++) {
    //             if(nums[j] == 1) {
    //                 sum += 1;
    //             }else{
    //                 sum -= 1;
    //             }

    //             if(sum == 0) {
    //                 len = max(len, j - i + 1);
    //             }
    //         }
    //     }
    //     return len;
    // }

    // int findMaxLength(vector<int>& nums) {
    //     int n = nums.size();
    //                             // O(N logn N) && O(N)
    //     unordered_map<int, int> mp;
    //     int sum = 0, maxlen = 0;
    //     for(int i = 0; i < n; i++) {

    //         if(nums[i] == 1) {
    //             sum += 1;
    //         }else{
    //             sum -= 1;
    //         }

    //         if(sum == 0) {
    //             maxlen = max(maxlen, i + 1);
    //         }

    //         if(mp.find(sum) != mp.end()) {
    //             maxlen = max(maxlen, i - mp[sum]);
    //         }else{
    //             mp[sum] = i;
    //         }
    //     }
    //     return maxlen;
    // }

    int findMaxLength(vector<int>& nums) {
        int n = nums.size(), sum = 0, maxlen = 0;
        vector<int> mp(2 * n + 1, INT_MIN);
        // O(N) && (N)
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                sum += 1;
            } else {
                sum -= 1;
            }

            if (sum == 0) {
                maxlen = max(maxlen, i + 1);
            }

            if (mp[sum + n] != INT_MIN) {
                maxlen = max(maxlen, i - mp[sum + n]);
            } else {
                mp[sum + n] = i;
            }
        }
        return maxlen;
    }
};
