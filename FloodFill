#include <iostream>
#include <vector>
#include <queue>
#include <utility>
using namespace std;

vector<vector<int>> floodFill(vector<vector<int>>& grid, int sr, int sc, int color) {
    int n = grid.size(), m = grid[0].size();
    int startColor = grid[sr][sc];
    queue<pair<int, int>> q;
    q.push({sr, sc});
    grid[sr][sc] = color;
    while(!q.empty()) {
        int r = q.front().first;
        int c = q.front().second;
        q.pop();
        
        int drow[] = {1, 0, -1, 0};
        int dcol[] = {0, 1, 0, -1};
        
        for(int i = 0; i < 4; i++) {
            int nrow = r + drow[i];
            int ncol = c + dcol[i];
            
            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == startColor) {
                q.push({nrow, ncol});
                grid[nrow][ncol]  = color;
            } 
        }
    }
    return grid;
}


int main() {
    int n, m;
    cout << "N : M : ";
    cin >> n >> m;
    vector<vector<int>> grid;
    
    for(int i = 0; i < n; i++) {
        vector<int> temp;
        for(int j = 0; j < m; j++) {
            int val;
            cin >> val;
            temp.push_back(val);
        }
        grid.push_back(temp);
    }
    floodFill(grid, 1, 1, 2);
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << grid[i][j] << " ";
        }
        cout << endl;
    }
    
    
    
    return 0;
}
