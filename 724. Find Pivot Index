class Solution {
public:
        // O(N^2)   &&  O(1)
    // int pivotIndex(vector<int>& nums) {
    //     int n = nums.size();

    //     for(int i = 0; i < n; i++) {
    //         int leftSum = 0, rightSum = 0;
    //         int l = i - 1, r = i + 1;

    //         while(l >= 0) {
    //             leftSum += nums[l];
    //             l--;
    //         }

    //         while(r < n) {
    //             rightSum += nums[r];
    //             r++;
    //         }
    //         if(leftSum == rightSum) return i;
    //     }
    //     return -1;
    // }

        // O(3N)   &&  O(2N)
    // int pivotIndex(vector<int>& nums) {
    //     int n = nums.size();
    //     vector<int> prefix(n, 0);
    //     vector<int> suffix(n, 0);

    //     for(int i = 1; i < n; i++) {
    //         prefix[i] += prefix[i - 1] + nums[i - 1];
    //     }

    //     for(int i = n - 2; i >= 0; i--) {
    //         suffix[i] += suffix[i + 1] + nums[i + 1];
    //     }

    //     for(int i = 0; i < n; i++) {
    //         if(prefix[i] == suffix[i]) {
    //             return i;
    //         }
    //     }
    // return -1;
    // }
        // O(2N)    &&      O(1
    int pivotIndex(vector<int>& nums) {
        int n = nums.size(), totalSum = 0;

        for(int i = 0; i < n; i++) {
            totalSum += nums[i];
        }

        int leftSum = 0;
        for(int i = 0; i < n; i++) {
            int rightSum = totalSum - leftSum - nums[i];

            if(leftSum == rightSum) return i;
            
            leftSum += nums[i];
        }
        return -1;
    }
};
